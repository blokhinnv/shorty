// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/shorty.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shorty_GetShortURL_FullMethodName      = "/proto.Shorty/GetShortURL"
	Shorty_GetOriginalURL_FullMethodName   = "/proto.Shorty/GetOriginalURL"
	Shorty_GetOriginalURLs_FullMethodName  = "/proto.Shorty/GetOriginalURLs"
	Shorty_GetShortURLJSON_FullMethodName  = "/proto.Shorty/GetShortURLJSON"
	Shorty_GetShortURLBatch_FullMethodName = "/proto.Shorty/GetShortURLBatch"
	Shorty_DeleteURL_FullMethodName        = "/proto.Shorty/DeleteURL"
	Shorty_GetStats_FullMethodName         = "/proto.Shorty/GetStats"
	Shorty_Ping_FullMethodName             = "/proto.Shorty/Ping"
)

// ShortyClient is the client API for Shorty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortyClient interface {
	// URL на вход
	GetShortURL(ctx context.Context, in *GetShortURLRequest, opts ...grpc.CallOption) (*GetShortURLResponse, error)
	// URL на вход
	GetOriginalURL(ctx context.Context, in *GetOriginalURLRequest, opts ...grpc.CallOption) (*GetOriginalURLResponse, error)
	// Ничего на вход, URLs на выход
	GetOriginalURLs(ctx context.Context, in *GetOriginalURLsRequest, opts ...grpc.CallOption) (Shorty_GetOriginalURLsClient, error)
	// json на вход, json на выход
	GetShortURLJSON(ctx context.Context, in *GetShortURLJSONRequest, opts ...grpc.CallOption) (*GetShortURLJSONResponse, error)
	// массив структур на вход, массив структур на выход
	GetShortURLBatch(ctx context.Context, in *GetShortURLBatchRequest, opts ...grpc.CallOption) (*GetShortURLBatchResponse, error)
	// список url на удаление
	DeleteURL(ctx context.Context, opts ...grpc.CallOption) (Shorty_DeleteURLClient, error)
	// технические
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type shortyClient struct {
	cc grpc.ClientConnInterface
}

func NewShortyClient(cc grpc.ClientConnInterface) ShortyClient {
	return &shortyClient{cc}
}

func (c *shortyClient) GetShortURL(ctx context.Context, in *GetShortURLRequest, opts ...grpc.CallOption) (*GetShortURLResponse, error) {
	out := new(GetShortURLResponse)
	err := c.cc.Invoke(ctx, Shorty_GetShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortyClient) GetOriginalURL(ctx context.Context, in *GetOriginalURLRequest, opts ...grpc.CallOption) (*GetOriginalURLResponse, error) {
	out := new(GetOriginalURLResponse)
	err := c.cc.Invoke(ctx, Shorty_GetOriginalURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortyClient) GetOriginalURLs(ctx context.Context, in *GetOriginalURLsRequest, opts ...grpc.CallOption) (Shorty_GetOriginalURLsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Shorty_ServiceDesc.Streams[0], Shorty_GetOriginalURLs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &shortyGetOriginalURLsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Shorty_GetOriginalURLsClient interface {
	Recv() (*GetOriginalURLsResponse, error)
	grpc.ClientStream
}

type shortyGetOriginalURLsClient struct {
	grpc.ClientStream
}

func (x *shortyGetOriginalURLsClient) Recv() (*GetOriginalURLsResponse, error) {
	m := new(GetOriginalURLsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shortyClient) GetShortURLJSON(ctx context.Context, in *GetShortURLJSONRequest, opts ...grpc.CallOption) (*GetShortURLJSONResponse, error) {
	out := new(GetShortURLJSONResponse)
	err := c.cc.Invoke(ctx, Shorty_GetShortURLJSON_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortyClient) GetShortURLBatch(ctx context.Context, in *GetShortURLBatchRequest, opts ...grpc.CallOption) (*GetShortURLBatchResponse, error) {
	out := new(GetShortURLBatchResponse)
	err := c.cc.Invoke(ctx, Shorty_GetShortURLBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortyClient) DeleteURL(ctx context.Context, opts ...grpc.CallOption) (Shorty_DeleteURLClient, error) {
	stream, err := c.cc.NewStream(ctx, &Shorty_ServiceDesc.Streams[1], Shorty_DeleteURL_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &shortyDeleteURLClient{stream}
	return x, nil
}

type Shorty_DeleteURLClient interface {
	Send(*DeleteURLRequest) error
	CloseAndRecv() (*DeleteURLResponse, error)
	grpc.ClientStream
}

type shortyDeleteURLClient struct {
	grpc.ClientStream
}

func (x *shortyDeleteURLClient) Send(m *DeleteURLRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shortyDeleteURLClient) CloseAndRecv() (*DeleteURLResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeleteURLResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shortyClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, Shorty_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortyClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Shorty_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortyServer is the server API for Shorty service.
// All implementations must embed UnimplementedShortyServer
// for forward compatibility
type ShortyServer interface {
	// URL на вход
	GetShortURL(context.Context, *GetShortURLRequest) (*GetShortURLResponse, error)
	// URL на вход
	GetOriginalURL(context.Context, *GetOriginalURLRequest) (*GetOriginalURLResponse, error)
	// Ничего на вход, URLs на выход
	GetOriginalURLs(*GetOriginalURLsRequest, Shorty_GetOriginalURLsServer) error
	// json на вход, json на выход
	GetShortURLJSON(context.Context, *GetShortURLJSONRequest) (*GetShortURLJSONResponse, error)
	// массив структур на вход, массив структур на выход
	GetShortURLBatch(context.Context, *GetShortURLBatchRequest) (*GetShortURLBatchResponse, error)
	// список url на удаление
	DeleteURL(Shorty_DeleteURLServer) error
	// технические
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedShortyServer()
}

// UnimplementedShortyServer must be embedded to have forward compatible implementations.
type UnimplementedShortyServer struct {
}

func (UnimplementedShortyServer) GetShortURL(context.Context, *GetShortURLRequest) (*GetShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURL not implemented")
}
func (UnimplementedShortyServer) GetOriginalURL(context.Context, *GetOriginalURLRequest) (*GetOriginalURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalURL not implemented")
}
func (UnimplementedShortyServer) GetOriginalURLs(*GetOriginalURLsRequest, Shorty_GetOriginalURLsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOriginalURLs not implemented")
}
func (UnimplementedShortyServer) GetShortURLJSON(context.Context, *GetShortURLJSONRequest) (*GetShortURLJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURLJSON not implemented")
}
func (UnimplementedShortyServer) GetShortURLBatch(context.Context, *GetShortURLBatchRequest) (*GetShortURLBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURLBatch not implemented")
}
func (UnimplementedShortyServer) DeleteURL(Shorty_DeleteURLServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteURL not implemented")
}
func (UnimplementedShortyServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShortyServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortyServer) mustEmbedUnimplementedShortyServer() {}

// UnsafeShortyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortyServer will
// result in compilation errors.
type UnsafeShortyServer interface {
	mustEmbedUnimplementedShortyServer()
}

func RegisterShortyServer(s grpc.ServiceRegistrar, srv ShortyServer) {
	s.RegisterService(&Shorty_ServiceDesc, srv)
}

func _Shorty_GetShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortyServer).GetShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorty_GetShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortyServer).GetShortURL(ctx, req.(*GetShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorty_GetOriginalURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortyServer).GetOriginalURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorty_GetOriginalURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortyServer).GetOriginalURL(ctx, req.(*GetOriginalURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorty_GetOriginalURLs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOriginalURLsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShortyServer).GetOriginalURLs(m, &shortyGetOriginalURLsServer{stream})
}

type Shorty_GetOriginalURLsServer interface {
	Send(*GetOriginalURLsResponse) error
	grpc.ServerStream
}

type shortyGetOriginalURLsServer struct {
	grpc.ServerStream
}

func (x *shortyGetOriginalURLsServer) Send(m *GetOriginalURLsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Shorty_GetShortURLJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortURLJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortyServer).GetShortURLJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorty_GetShortURLJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortyServer).GetShortURLJSON(ctx, req.(*GetShortURLJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorty_GetShortURLBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortURLBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortyServer).GetShortURLBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorty_GetShortURLBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortyServer).GetShortURLBatch(ctx, req.(*GetShortURLBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorty_DeleteURL_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShortyServer).DeleteURL(&shortyDeleteURLServer{stream})
}

type Shorty_DeleteURLServer interface {
	SendAndClose(*DeleteURLResponse) error
	Recv() (*DeleteURLRequest, error)
	grpc.ServerStream
}

type shortyDeleteURLServer struct {
	grpc.ServerStream
}

func (x *shortyDeleteURLServer) SendAndClose(m *DeleteURLResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shortyDeleteURLServer) Recv() (*DeleteURLRequest, error) {
	m := new(DeleteURLRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Shorty_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortyServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorty_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortyServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorty_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortyServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shorty_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortyServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shorty_ServiceDesc is the grpc.ServiceDesc for Shorty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shorty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Shorty",
	HandlerType: (*ShortyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortURL",
			Handler:    _Shorty_GetShortURL_Handler,
		},
		{
			MethodName: "GetOriginalURL",
			Handler:    _Shorty_GetOriginalURL_Handler,
		},
		{
			MethodName: "GetShortURLJSON",
			Handler:    _Shorty_GetShortURLJSON_Handler,
		},
		{
			MethodName: "GetShortURLBatch",
			Handler:    _Shorty_GetShortURLBatch_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Shorty_GetStats_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Shorty_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOriginalURLs",
			Handler:       _Shorty_GetOriginalURLs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteURL",
			Handler:       _Shorty_DeleteURL_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/shorty.proto",
}
